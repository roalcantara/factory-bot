{"version":3,"file":"factory-bot.js","sourceRoot":"","sources":["../src/factory-bot.ts"],"names":[],"mappings":";;AAAA,iCAA2C;AAW3C;IAAA;QACU,cAAS,GAAG,IAAI,GAAG,EAAmB,CAAA;QACtC,cAAS,GAAG,CAAC,CAAA;QAuDb,UAAK,GAAG,UAAA,GAAG;YACjB,IAAI,mBAAU,CAAC,GAAG,CAAC;gBAAE,OAAO,GAAG,EAAE,CAAA;YAEjC,OAAO,GAAG,CAAA;QACZ,CAAC,CAAA;IACH,CAAC;IA1DC,wBAAG,GAAH,UAAI,IAAY;QACd,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,SAAS,CAAA;IAC3C,CAAC;IAED,0BAAK,GAAL;QACE,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAA;IACnC,CAAC;IAED,0BAAK,GAAL;QACE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAA;QACtB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAA;IACpB,CAAC;IAED,2BAAM,GAAN,UAAe,IAAY,EAAE,UAAsB,EAAE,KAA2B;QAC9E,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG;YACrB,KAAK,OAAA,EAAE,UAAU,YAAA;SAClB,CAAA;IACH,CAAC;IAED,gCAAW,GAAX,UAAe,IAAmB;QAChC,OAAO,IAAI,IAAI,EAAE,CAAA;IACnB,CAAC;IAED,0BAAK,GAAL,UAAe,IAAY,EAAE,UAAwB;QAArD,iBAWC;QAVC,IAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAY,CAAA;QAC/C,IAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAI,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;QAExE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;aAC5B,OAAO,CAAC,UAAA,SAAS;YAChB,QAAQ,CAAC,SAAS,CAAC,GAAG,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAA;QACjE,CAAC,CAAC,CAAA;QAEJ,2BAA2B;QAC3B,OAAO,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAM,CAAA;IACjD,CAAC;IAED,8BAAS,GAAT,UAAkB,IAAY,EAAE,MAAU,EAAE,UAAuB;QAAnE,iBAIC;QAJ+B,uBAAA,EAAA,UAAU;QACxC,OAAO,KAAK,CAAI,MAAM,CAAC;aACpB,IAAI,CAAC,SAAS,CAAC;aACb,GAAG,CAAC,cAAM,OAAA,KAAI,CAAC,KAAK,CAAI,IAAI,EAAE,UAAU,CAAC,EAA/B,CAA+B,CAAC,CAAA;IACjD,CAAC;IAED,yBAAI,GAAJ,UAAQ,YAAe;QACrB,OAAO,eAAM,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;aACpC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,YAAY,CAAC,GAAG,CAAM,EAAtB,CAAsB,CAAC,CAAC,CAAA;IACxC,CAAC;IAED,wBAAG,GAAH,UAAI,UAA6C;QAC/C,IAAI,CAAC,SAAS,EAAG,CAAA;QAEjB,OAAO,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IACnC,CAAC;IAOH,iBAAC;AAAD,CAAC,AA9DD,IA8DC;AA9DY,gCAAU","sourcesContent":["import { isFunction, sample } from 'lodash'\n\nexport type FactoryParam = () => any\n\nexport type FactoryAttribute = string | number | boolean | Date | FactoryParam\n\nexport type Factory = {\n  clazz: any\n  attributes: Map<string, FactoryAttribute>\n}\n\nexport class FactoryBot {\n  private factories = new Map<string, Factory>()\n  private sequences = 0\n\n  has(name: string): boolean {\n    return this.factories[name] !== undefined\n  }\n\n  count(): number {\n    return this.factories.keys.length\n  }\n\n  clear(): void {\n    this.factories.clear()\n    this.sequences = 0\n  }\n\n  define<T = {}>(name: string, attributes: Partial<T>, clazz?: { new(): T; } | any): void {\n    this.factories[name] = {\n      clazz, attributes\n    }\n  }\n\n  instantiate<T>(type: (new () => T)): T {\n    return new type()\n  }\n\n  build <T = {}>(name: string, attributes ?: Partial<T>): T {\n    const factory = this.factories[name] as Factory\n    const instance = factory.clazz ? this.instantiate<T>(factory.clazz) : {}\n\n    Object.keys(factory.attributes)\n      .forEach(attribute => {\n        instance[attribute] = this.parse(factory.attributes[attribute])\n      })\n\n    // tslint:disable-next-line\n    return Object.assign(instance, attributes) as T\n  }\n\n  buildList<T = {}>(name: string, length = 1, attributes?: Partial<T>): Array <T> {\n    return Array<T>(length)\n      .fill(undefined)\n        .map(() => this.build<T>(name, attributes))\n  }\n\n  rand<T>(enumInstance: T): T {\n    return sample(Object.keys(enumInstance)\n      .map(key => enumInstance[key] as T))\n  }\n\n  seq(callbackfn: (seq: number) => FactoryAttribute): FactoryAttribute {\n    this.sequences ++\n\n    return callbackfn(this.sequences)\n  }\n\n  private parse = val => {\n    if (isFunction(val)) return val()\n\n    return val\n  }\n}\n"]}